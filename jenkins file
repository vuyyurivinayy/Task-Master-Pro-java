pipeline {
    agent any
    
    tools {
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('git checkput') {
            steps {
                git branch: 'main', url: 'https://github.com/vuyyurivinayy/Task-Master-Pro-java.git'
            }
        }
    
        stage('compile') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('test') {
            steps {
                sh 'mvn test'
            }
        }
    
        stage('trivy FS scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
    
        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=TaskMaster \
                    -Dsonar.projectName=TaskMaster -Dsonar.java.binaries=target '''
                }
            }
        }
    
        stage('build application') {
            steps {
                sh 'mvn package'
            }
        }
    
        stage('publish artifact to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'settings', jdk: '', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh 'mvn deploy'
                }
            }
        }
    
    
        stage('build & tag dockerimage') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t vuyyurivinay/taskmaster:latest .'
                    }
                }
            }
        }
    
    
        stage('trivy scan docker image') {
            steps {
                sh 'trivy image --format table -o image-report.html vuyyurivinay/taskmaster:latest'
            }
        }
    
    
        stage('push dockerimage') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker push vuyyurivinay/taskmaster:latest'
                    }
                }
            }
        }
        
        stage('deploying to kubernetes') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' eks-demo', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://BF11A85629D1D581D4C895EBFE997DF0.gr7.us-east-1.eks.amazonaws.com') {
                    sh 'kubectl apply -f deployment-service.yml -n webapps'
                    sleep 30
                }
            }
        }
        
        stage('verify the deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' eks-demo', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://BF11A85629D1D581D4C895EBFE997DF0.gr7.us-east-1.eks.amazonaws.com') {
                    sh 'kubectl get pods -n webapps'
                    sh 'kubectl get svc -n webapps'
                }
            }
        }
    }
}
